## parser to enchance logs with ECS compliant GeoIP data

block parser geoip_ecs() {
    # Expects ${source.ip} and ${destination.ip} to exist.
    # It is heavily relies on 'format_json --omit-empty-values' to exclude
    # empty values when for example GeoIP parsing fails.
    # Otherwise Elasticsearch could drop the whole payload (ie. "," value does not match expected mapping).
    channel {

        parser {
             geoip2(
                 # srcgeo.* will not be included from final payload
                 "${source.ip}",
                 prefix( "srcgeo." )
                 database( "/etc/syslog-ng/GeoLite2-City.mmdb" )
             );

             geoip2(
                # neither dstgeo.*
                 "${destination.ip}",
                 prefix( "dstgeo." )
                 database( "/etc/syslog-ng/GeoLite2-City.mmdb" )
             );
        };

        # Only add location data when it is not empty
        rewrite {
            set(
                "${srcgeo.location.latitude},${srcgeo.location.longitude}",
                value( "source.geo.location" ),
                condition(not "${srcgeo.location.latitude}" == "")
            );
        };

        rewrite {
            set(
                "${dstgeo.location.latitude},${dstgeo.location.longitude}",
                value( "destination.geo.location" ),
                condition(not "${dstgeo.location.latitude}" == "")
            );
        };

        # Re-map kv pairs of geoip to match Elastic ECS requirements
        parser {
             map-value-pairs(
                 pair("source.geo.city_name",                "${srcgeo.city.names.en}")
                 pair("source.geo.continent_name",           "${srcgeo.continent.names.en}")
                 pair("source.geo.country_iso_code",         "${srcgeo.country.iso_code}")
                 pair("source.geo.country_name",             "${srcgeo.country.names.en}")
                 pair("source.geo.region_iso_code",          "${srcgeo.subdivisions.0.iso_code}")
                 pair("source.geo.region_name",              "${srcgeo.subdivisions.0.names.en}")
             );

             map-value-pairs(
                 pair("destination.geo.city_name",           "${dstgeo.city.names.en}")
                 pair("destination.geo.continent_name",      "${dstgeo.continent.names.en}")
                 pair("destination.geo.country_iso_code",    "${dstgeo.country.iso_code}")
                 pair("destination.geo.country_name",        "${dstgeo.country.names.en}")
                 pair("destination.geo.region_iso_code",     "${dstgeo.subdivisions.0.iso_code}")
                 pair("destination.geo.region_name",         "${dstgeo.subdivisions.0.names.en}")
             );
        };
    };
};


filter f_dnsmasq_query {
    match('query' value("MESSAGE"));
#    match("query\[.+\]" value("MESSAGE"));
};

parser p_dnsmasq_csv {
    # dnsmasq[15458]: 744 172.18.0.5/47300 query[A] s.youtube.com from 172.18.0.5
    csv-parser(
        columns(dns.id, client_ip_port, dns.question.type, dns.question.name, from, client.ip)
        delimiters(chars(' '))
        template("${MESSAGE}")
    );

    csv-parser(
        columns(client_ip1, client.port)
        delimiters(chars('/'))
        template("${client_ip_port}")
    );

    csv-parser(
        columns(query,dns.question.type)
        delimiters(chars('[]'))
        template("${dns.question.type}")
    );
    # dnsmasq[1492]: 357878 172.18.0.6/36150 reply i.embed.ly is <CNAME>

    map-value-pairs(
        # https://github.com/elastic/beats/blob/master/packetbeat/_meta/sample_outputs/dns.json
        pair("event.action",                "dns-query")
        pair("destination.ip",              "`DNS_SERVER`") # DNS server
        pair("event.category",              list("network")) # array
        pair("event.dataset",               "network.dns") # network.flow, network.dns, network.f2b
        pair("event.kind",                  "event")
        pair("event.module",                "network")
        pair("event.provider",              "dnsmasq")
        pair("event.type",                  "info") # fixed set of value
        pair("tags",                        list("syslog-ng"))
        pair("dns.type",                    "query") # either query or answer
        pair("network.direction",           "outgoing")
    );

    python(
        class("DNSSuffixResolver")
        options(
            "domain" "dns.question.name"
            "tld" "dns.question.top_level_domain"
            "subdomain" "dns.question.subdomain"
            "regdomain" "dns.question.registered_domain"
        )
    );

};

template t_network_dns {
    template("$(format_json --pair host.name=$HOST --pair host.ip=$SOURCEIP --pair @timestamp=$ISODATE --pair ecs.version=1.5.0 --key source.ip --key destination.ip --key dns.* --key network.* --key event.* tags=list($tags) event.category=list(${event.category}) event.type=list(${event.type}))\n");
};


destination d_dnsmasq_json {
    # ECS info: https://www.elastic.co/guide/en/beats/packetbeat/current/exported-fields-dns.html
    # https://github.com/elastic/ecs/issues/10
    # https://www.elastic.co/guide/en/ecs/current/ecs-client.html
    file("/var/log/dnsmasq.json" template("$(template t_network_dns)"));
};

destination d_elastic_dnsmasq {
    elasticsearch-http(
        url("http://`REMOTE_HOST`:`REMOTE_PORT`/_bulk")
        index("network-${S_YEAR}-${S_MONTH}")
        headers("Content-Type: application/x-ndjson")
        type("")
        workers(4)
        batch-lines(16)
        timeout(10)
        template("$(template t_network_dns)")
        disk-buffer(
            mem-buf-length(10000)
            disk-buf-size(10000000)
            reliable(no)
        )
        persist-name("dnsmasq")
        log-fifo-size(20000)
        user("`REMOTE_USER`")
        password("`REMOTE_PASS`")
    );
};

destination d_network_dnsmasq {
    channel {
        parser(p_dnsmasq_csv);
#        destination(d_dnsmasq_json);
        destination(d_elastic_dnsmasq);
    };
};

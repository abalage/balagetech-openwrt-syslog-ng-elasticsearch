@define elastic_host "172.18.0.10:9200"
@define elastic_user "user"
@define elastic_pass "password"

filter f_fail2ban_stat {
    program("fail2ban-server")
    and (
        match('Ban' value("MESSAGE"))
        or
        match('Found' value("MESSAGE"));
    )
};

parser p_patterndb {
    db_parser(
        file("/etc/syslog-ng/patterndb.xml")
    );
};

template t_fail2ban {
    template("$(format-json --pair host.name=$HOST --pair host.ip=$SOURCEIP --pair @timestamp=$ISODATE --pair ecs.version=1.5.0 --key process.* --key source.* --key host.* --key service.* --key network.* --key event.* tags=list($tags) event.category=list(${event.category}) event.type=list(${event.type}))\n");
};

parser p_fail2ban {
    map-value-pairs(
        pair("source.ip",               "${ip}")        # ip
        pair("event.action",            "${action}")    # either "Ban" or "Found", will be lowercased later
        pair("event.category",          list("intrusion_detection"))
        pair("event.dataset",           "network.${jail}") # network.flow, network.dns, network.ssh, network.http
        pair("event.kind",              "alert")
        pair("event.module",            "network")
        pair("event.provider",          "fail2ban")
        pair("tags",                    list("syslog-ng"))
        pair("network.direction",       "incoming")
    );
    geoip2(
        "${source.ip}",
        prefix( "geo." )
        database( "/etc/syslog-ng/GeoLite2-City.mmdb" )
    );
    map-value-pairs(
        pair("source.geo.city_name",           "${geo.city.names.en}")
        pair("source.geo.continent_name",      "${geo.continent.names.en}")
        pair("source.geo.country_iso_code",    "${geo.country.iso_code}")
        pair("source.geo.country_name",        "${geo.country.names.en}")
        pair("source.geo.region_iso_code",     "${geo.subdivisions.0.iso_code}")
        pair("source.geo.region_name",         "${geo.subdivisions.0.names.en}")
        pair("source.geo.location",            "${geo.location.latitude},${geo.location.longitude}")
    );
};

destination d_elastic_fail2ban {
    elasticsearch-http(
        url("http://`elastic_host`/_bulk")
        index("network-${S_YEAR}-${S_MONTH}")
        headers("Content-Type: application/x-ndjson")
        type("")
        workers(4)
        batch-lines(16)
        timeout(10)
        template("$(template t_fail2ban)")
        disk-buffer(
            mem-buf-length(10000)
            disk-buf-size(10000000)
            reliable(no)
        )
        persist-name("fail2ban")
        log-fifo-size(20000)
        user("`elastic_user`")
        password("`elastic_pass`")
    );
};

destination d_fail2ban_json {
    file("/var/log/f2b.json" template("$(template t_fail2ban)"));
};

destination d_network_fail2ban {
    channel {
        parser(p_patterndb);
        parser(p_fail2ban);
        rewrite { set("$(lowercase ${event.action})" value("event.action")); };

        if ( match('found' value("event.action")) ) {
                rewrite { set("access" value("event.type")); };
        }
        else{ # 'ban'
                rewrite { set("denied" value("event.type")); };
        };

#        destination(d_fail2ban_json);
        destination(d_elastic_fail2ban);
    };
};

@define elastic_host "172.18.0.10:9200"
@define elastic_user "user"
@define elastic_pass "password"

filter f_ulogd_stat {
    program("ulogd")
    and (
        match('NEW' value("MESSAGE"))
        or
        match('DESTROY' value("MESSAGE"))
    )
};

filter f_correlated_message { match("Session completed" value("MESSAGE")) and not match('NaN' value("event.duration")) };

parser p_correlate_session_data {
    grouping-by(
        key("${source.ip}/${destination.ip}/${source.port}/${destination.port}")
        scope("host")
        where(match("ORIG" value("MESSAGE")))
        trigger(match("DESTROY" value("MESSAGE")))
        having( "${UNIXTIME}@2" ne "1" )
        aggregate(
            value("event.start" "${ISODATE}@2")
            value("event.end" "${ISODATE}@1")
            value("event.duration", "$(- ${UNIXTIME}@1 ${UNIXTIME}@2)")
            value("MESSAGE" "Session completed; client='${source.ip}'; server='${destination.ip}'; destination_port='${destination.port}; protocol='${network.transport}'; session_lenght='${event.duration}'\n")
            inherit-mode("context")
        )
        inject-mode("pass-through")
        # destroy events sometimes arrive later than 2 minutes, even when a client app is already closed (ssh, telnet)
        timeout(600)
    );
};

template t_network {
    template("$(format_json --omit-empty-values --pair host.name=$HOST --pair host.hostname=$HOST --pair host.ip=$SOURCEIP --pair @timestamp=$ISODATE --pair ecs.version=1.5.0 --key host.* --key event.* --key source.* --key destination.* --key network.* tags=list($tags) event.category=list(${event.category}) event.type=list(${event.type}))\n");
};

destination d_elastic_network {
    elasticsearch-http(
        url("http://`elastic_host`/_bulk")
        index("network-${S_YEAR}-${S_MONTH}")
        headers("Content-Type: application/x-ndjson")
        type("")
        workers(4)
        batch-lines(16)
        timeout(10)
        template("$(template t_network)")
        disk-buffer(
            mem-buf-length(10000)
            disk-buf-size(10000000)
            reliable(no)
        )
        persist-name("network2")
        log-fifo-size(20000)
        user("`elastic_user`")
        password("`elastic_pass`")
    );
};

destination d_elastic_json {
    file("/var/log/network.json" template("$(template t_network)"));
};

destination d_network_ulogd {
    channel {
        parser {
            csv-parser(
                columns(ORIG, REPLY)
                delimiters(chars(","))
            );
            kv-parser(
                prefix("outbound.")
                template("${ORIG}")
            );
            kv-parser(
                prefix("inbound.")
                template("${REPLY}")
            );
            # remap kv pairs to match index template mapping
            map-value-pairs(
                pair("source.bytes",                int("${outbound.BYTES}"))
                pair("source.ip",                   "${outbound.SRC}")
                pair("source.port",                 int("${outbound.SPT}"))
                pair("source.packets",              int("${outbound.PKTS}")) # request from source
                pair("destination.bytes",           int("${inbound.BYTES}")) # reply is inbound from router pow
                pair("destination.ip",              "${outbound.DST}") # this could be different in inbound (router SNAT)
                pair("destination.port",            int("${outbound.DPT}")) # same as inbound.SPT
                pair("destination.packets",         int("${inbound.PKTS}")) # reply is inbound from router pow
                pair("network.type",                "ipv4")
                pair("network.name",                "Balage Home")
                pair("event.action",                "network_flow")
                pair("event.category",              list("network")) # array
                pair("event.dataset",               "network.flow") # network.flow, network.dns, network.f2b
                pair("event.kind",                  "event")
                pair("event.module",                "network")
                pair("event.provider",              "ulogd2")
                pair("event.type",                  "connection") # closely depends on event.category
                pair("tags",                        list("syslog-ng"))
            );
        };

        rewrite { set("$(list-head $(getent services ${destination.port}))" value("network.protocol")); };
        rewrite { set("$(lowercase ${inbound.PROTO})" value("network.transport")); };
        rewrite { set("$(+ ${source.bytes} ${destination.bytes})" value("network.bytes")); };
        rewrite { set("$(+ ${source.packets} ${destination.packets})" value("network.packets")); };
        rewrite {
                # network.community_id (https://github.com/corelight/community-id-spec)
                set("1:$(base64-encode $(sha1 -l 20 0 ${source.ip} ${destination.ip} ${network.transport} 0 ${source.port} ${destination.port} ))"
                value("network.community_id"));
        };

        if ( match("^172\.18\..*" value("source.ip")) or match("^192\.168\..*" value("source.ip"))) {
                rewrite { set("outbound" value("network.direction")); };
        }
        else{
                rewrite { set("inbound" value("network.direction")); };
        };

        parser(p_correlate_session_data);
        parser { geoip_ecs(); };

        filter(f_correlated_message);
        #destination(d_elastic_json);
        destination(d_elastic_network);
    };
};

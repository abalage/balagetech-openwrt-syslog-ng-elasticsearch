@define elastic_host "172.18.0.10:9200"
@define elastic_user "user"
@define elastic_pass "password"

filter f_unbound_stat {
    program("unbound") and
    match(' IN' value("MESSAGE"));
};

python {

"""
from dns.question.name it parses:
- dns.question.top_level_domain
- dns.question.subdomain
- dns.question.registered_domain
by using publicsuffixlist from Mozilla
"""

import traceback
from publicsuffixlist import PublicSuffixList

with open("/usr/lib/python3.6/site-packages/publicsuffixlist/public_suffix_list.dat", "rb") as f:
    psl = PublicSuffixList(f)

class DNSSuffixResolver(object):
    def init(self, options):
        self.domain = options["domain"]
        self.tld = options["tld"]
        self.subdomain = options["subdomain"]
        self.regdomain = options["regdomain"]
        return True
    def parse(self, log_message):
        dom = str(log_message[self.domain].decode('utf-8'))
        dom = dom.rstrip('.')
        try:
            if log_message['dns.question.type'].decode('utf-8') in ["A", "AAAA"]:

                # Return longest publically shared suffix => top_level_domain
                log_message[self.tld] = psl.publicsuffix(dom, accept_unknown=True)
                # Return shortest suffix assigned for an individual. => registered_domain
                log_message[self.regdomain] = str(psl.privatesuffix(dom, accept_unknown=True))
                # Return tuple of labels and the private suffix. => subdomain
                priv = psl.privateparts(dom)
                concat=''
                for key in priv[ : -1 ]:
                    concat += key + "."
                # Omit trailing dot.
                log_message[self.subdomain] = str(concat.rstrip('.'))
            else:
                pass
        except Exception:
            traceback.print_tb
            raise
#            pass

        # return True, other way message is dropped
        return True
};

parser p_unbound_csv {
    # unbound[1974]: [1974:0] info: 172.18.0.1 1.0.18.172.in-addr.arpa. PTR IN
    # unbound[1974]: [1974:1] info: 172.18.0.1 mariadb. MX IN
    # unbound[1974]: [1974:0] info: 172.18.0.5 0.pool.ntp.org. A IN
    # unbound[1974]: [1974:1] info: 172.18.0.5 0.pool.ntp.org. AAAA IN

    csv-parser(
        columns(question.ptid, syslog.level, source.ip, dns.question.name, dns.question.type, dns.question.class)
        delimiters(chars(' '))
        template("${MESSAGE}")
    );

    map-value-pairs(
        # https://github.com/elastic/beats/blob/master/packetbeat/_meta/sample_outputs/dns.json
        pair("event.action",                "dns-query")
        pair("destination.ip",              "172.18.0.1") # DNS server
        pair("event.category",              list("network")) # array
        pair("event.dataset",               "network.dns") # network.flow, network.dns, network.f2b
        pair("event.kind",                  "event")
        pair("event.module",                "network")
        pair("event.provider",              "unbound")
        pair("event.type",                  "info") # fixed set of value
        pair("tags",                        list("syslog-ng"))
        pair("dns.type",                    "query") # either query or answer
        pair("network.direction",           "outgoing")
    );

    python(
        class("DNSSuffixResolver")
        options(
            "domain" "dns.question.name"
            "tld" "dns.question.top_level_domain"
            "subdomain" "dns.question.subdomain"
            "regdomain" "dns.question.registered_domain"
        )
    );
};

template t_network_unbound {
    template("$(format_json --pair host.name=$HOST --pair host.ip=$SOURCEIP --pair @timestamp=$ISODATE --pair ecs.version=1.5.0 --key source.ip --key destination.ip --key dns.* --key network.* --key event.* tags=list($tags) event.category=list(${event.category}) event.type=list(${event.type}))\n");
};

destination d_elastic_unbound {
    elasticsearch-http(
        url("http://`elastic_host`/_bulk")
        index("network-${S_YEAR}-${S_MONTH}")
        headers("Content-Type: application/x-ndjson")
        type("")
        workers(4)
        batch-lines(16)
        timeout(10)
        template("$(template t_network_unbound)")
        disk-buffer(
            mem-buf-length(10000)
            disk-buf-size(10000000)
            reliable(no)
        )
        persist-name("unbound")
        log-fifo-size(20000)
        user("`elastic_user`")
        password("`elastic_pass`")
    );
};

destination d_dns_json {
    file("/var/log/dns.json" template("$(template t_network_unbound)"));
};

destination d_network_unbound {
    channel {
        parser(p_unbound_csv);
#        destination(d_dns_json);
        destination(d_elastic_unbound);
    };
};

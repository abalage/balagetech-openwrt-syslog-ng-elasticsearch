@define network_ip      "172.18.0.20"
@define router_hostname "netgear"
@define elastic_host    "172.22.0.40:9200"

source s_network{
    network(
        ip("`network_ip`")
        port(514)
        transport("tcp")
        log-fetch-limit(250)
        max-connections(200)
    );
};

destination d_network{
    file(
        "/var/log/network/$HOST/$S_YEAR.$S_MONTH.$S_DAY/messages"
        create-dirs(yes)
    );
};

filter f_main_router {
    host("`router_hostname`")
    and (
        match("[NEW]" value("MESSAGE"))
        or
        match("[DESTROY]" value("MESSAGE"))
    )
};

filter f_correlated_message { match("Session completed" value("MESSAGE")) and not match('NaN' value("event.duration")) };

python {

"""
simple syslog-ng Python parser example
resolves IP to hostname
value pair names are hard-coded
"""

import socket

class SngResolver(object):
    def init(self, options):
        self.ip = options["ip"]
        self.result_key = options["result"]
        return True
    def parse(self, log_message):
        """
        Resolves IP to hostname
        """
        ipaddr_b = log_message[self.ip]
        ipaddr = ipaddr_b.decode('utf-8')

        # try to resolve the IP address
        try:
            resolved = socket.gethostbyaddr(ipaddr)
            hostname = resolved[0]
            log_message[self.result_key] = hostname
        except:
            pass

        # return True, other way message is dropped
        return True

};

# resolve non-local destination IP addresses
# using Python parser
parser p_reversedns_server {
    python(
        class("SngResolver")
        options(
            "ip" "outbound.destination.ip"
            "result" "outbound.destination.address"
        )
    );
};

parser p_reversedns_client {
    python(
        class("SngResolver")
        options(
            "ip" "outbound.source.ip"
            "result" "outbound.source.address"
        )
    );
};

parser p_correlate_session_data {
    grouping-by(
        key("${outbound.source.ip}/${outbound.destination.ip}/${outbound.source.port}/${outbound.destination.port}")
        scope("host")
        where(match("ORIG" value("MESSAGE")))
        trigger(match("DESTROY" value("MESSAGE")))
        having( "${UNIXTIME}@2" ne "1" )
        aggregate(
            value("event.start" "${ISODATE}@2")
            value("event.end" "${ISODATE}@1")
            value("event.duration", "$(- ${UNIXTIME}@1 ${UNIXTIME}@2)")
            value("MESSAGE" "Session completed; client='${outbound.source.ip}'; server='${outbound.destination.ip}'; destination_port='${outbound.destination.port}; protocol='${network.transport}'; session_lenght='${event.duration}'\n")
            inherit-mode("context")
        )
        inject-mode("pass-through")
        # destroy events sometimes arrive later than 2 minutes, even when a client app is already closed (ssh, telnet)
        timeout(600)
    );
};

destination d_network_conntrack{
    file(
        "/var/log/network/$HOST/$S_YEAR.$S_MONTH.$S_DAY/messages.json"
        template("$(format_json --pair host.name=$HOST --pair host.ip=$SOURCEIP --pair @timestamp=$ISODATE --pair message=$MESSAGE --pair tags=openwrt --pair ecs.version=1.0.0 --key host.* --key event.* --key inbound.s* --key inbound.d* --key outbound.s* --key outbound.d* --key network.*)\n")
        create-dirs(yes)
    );
};

destination d_elastic_network {
    http(url("http://`elastic_host`/_bulk")
        method("POST")
        batch-lines(3)
        workers(4)
        headers("Content-Type: application/x-ndjson")
        body-suffix("\n")
        body(
            "{ \"index\":{ \"_index\": \"network-${S_YEAR}-${S_MONTH}-${S_DAY}\" } }\n$(format_json --pair host.name=$HOST --pair host.ip=$SOURCEIP --pair @timestamp=$ISODATE --pair message=$MESSAGE --pair tags=openwrt --pair ecs.version=1.0.0 --key host.* --key event.* --key inbound.s* --key inbound.d* --key outbound.s* --key outbound.d* --key network.*)\n")
        disk-buffer(
            mem-buf-length(10000)
            disk-buf-size(10000000)
            reliable(no)
            #dir("/var/lib/syslog-ng/disk-buffer-balagetech")
        )
        persist-name("network")
    );
};

log {
    source(s_network);
    destination(d_network);
    log {
        filter(f_main_router);
        parser {
            csv-parser(
                columns(ORIG, REPLY)
                delimiters(chars(","))
            );
            kv-parser(
                prefix("outbound.")
                template("${ORIG}")
            );
            kv-parser(
                prefix("inbound.")
                template("${REPLY}")
            );
            # remap kv pairs to match index template mapping
            map-value-pairs(
                pair("inbound.source.ip",           "${inbound.SRC}")
                pair("inbound.destination.ip",      "${inbound.DST}")
                pair("network.transport",           "${inbound.PROTO}")
                pair("inbound.source.port",         "${inbound.SPT}")
                pair("inbound.destination.port",    "${inbound.DPT}")
                pair("inbound.source.packets",      "${inbound.PKTS}")
                pair("inbound.source.bytes",        "${inbound.BYTES}")
                pair("outbound.source.ip",          "${outbound.SRC}")
                pair("outbound.destination.ip",     "${outbound.DST}")
                pair("outbound.source.port",        "${outbound.SPT}")
                pair("outbound.destination.port",   "${outbound.DPT}")
                pair("outbound.source.packets",     "${outbound.PKTS}")
                pair("outbound.source.bytes",       "${outbound.BYTES}")
            );
            geoip2(
                # this will not be written to destinations according to the template function format_json
                "${outbound.destination.ip}",
                prefix( "geo." )
                database( "/etc/syslog-ng/GeoLite2-City.mmdb" )
            );
        };
        parser(p_correlate_session_data);
        parser(p_reversedns_server);
        parser(p_reversedns_client);
        # only add geo.* when it makes sense
        # if-statements cannot be set inline in parsers, thus it is specified separately
        if ("${geo.location.latitude}" != "") {
            # remap kv pairs of geoip to match Elastic ECS requirements
            parser {
                map-value-pairs(
                    pair("outbound.destination.geo.city_name",           "${geo.city.names.en}")
                    pair("outbound.destination.geo.continent_name",      "${geo.continent.names.en}")
                    pair("outbound.destination.geo.country_iso_code",    "${geo.country.iso_code}")
                    pair("outbound.destination.geo.country_name",        "${geo.country.names.en}")
                    #pair("outbound.destination.geo.name",                "")
                    pair("outbound.destination.geo.region_iso_code",     "${geo.subdivisions.0.iso_code}")
                    pair("outbound.destination.geo.region_name",         "${geo.subdivisions.0.names.en}")
                    pair("outbound.destination.geo.location",            "${geo.location.latitude},${geo.location.longitude}")
                );
            };
        };
        # for debugging purposes only
        #destination(d_network_conntrack);
        filter(f_correlated_message);
        destination(d_elastic_network);
    };
    flags(flow-control);
};


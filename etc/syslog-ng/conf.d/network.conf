source s_network{
    network(
        ip("172.18.0.20")
        port(514)
        transport("tcp")
        log-fetch-limit(250)
        max-connections(20)
    );
};

destination d_network{
    file(
        "/var/log/network/$HOST/$S_YEAR.$S_MONTH.$S_DAY/messages"
        create-dirs(yes)
    );
};

filter f_main_router {
    host("netgear")
    and (
        match("[NEW]" value("MESSAGE"))
        or
        match("[DESTROY]" value("MESSAGE"))
    )
};

filter f_correlated_message { match("Session completed" value("MESSAGE")) };

#python {
#    """
#   insert patched python parser code here
#    """
#};

parser p_reversedns_server {
    python(
        class("SngResolver")
        options(
            "ip" "nf_orig.DST"
            "result" "hostname.server"
        )
    );
};

parser p_reversedns_client {
    python(
        class("SngResolver")
        options(
            "ip" "nf_orig.SRC"
            "result" "hostname.client"
        )
    );
};

parser p_correlate_session_data {
    grouping-by(
        key("${nf_orig.SRC}/${nf_orig.DST}/${nf_orig.SPT}/${nf_orig.DPT}")
        scope("host")
        # it has the same effect as f_main_router (dup)
        where(match("ORIG" value("MESSAGE")))
        trigger(match("DESTROY" value("MESSAGE")))
        having( "${UNIXTIME}@2" ne "1" )
        aggregate(
            value("nf.SESSION_START" "${ISODATE}@2")
            value("nf.SESSION_END" "${ISODATE}@1")
            value("nf.SESSION_LENGTH", "$(- ${UNIXTIME}@1 ${UNIXTIME}@2)")
            value("MESSAGE" "Session completed; client='${nf_orig.SRC}'; server='${nf_orig.DST}'; destination_port='${nf_orig.DPT}; protocol='${nf_orig.PROTO}'; session_lenght='${nf.SESSION_LENGTH}'\n")
            inherit-mode("context")
        )
        inject-mode("pass-through")
        # destroy events sometimes arrive later than 2 minutes, even when a client app is already closed (ssh, telnet)
        timeout(600)
    );
};

destination d_network_conntrack{
    file(
        "/var/log/network/$HOST/$S_YEAR.$S_MONTH.$S_DAY/messages.json"
        template("$(format_json --scope rfc5424 --key HOST --key ISODATE --key hostname.* --key nf_orig.* --key nf_reply.* --key nf.SESSION* --key geoip2.*)\n")
        create-dirs(yes)
    );
};

destination d_elastic_network {
    http(url("http://172.20.0.40:9200/_bulk")
        method("POST")
        batch-lines(3)
        workers(4)
        headers("Content-Type: application/x-ndjson")
        body-suffix("\n")
        body(
            "{ \"index\":{ \"_index\": \"network\", \"_type\": \"test\" } }\n$(format-json --key HOST --key ISODATE --key MESSAGE --key hostname.* --key nf_orig.* --key nf_reply.* --key nf.SESSION* --key geoip2.*)\n")
        disk-buffer(
            mem-buf-length(10000)
            disk-buf-size(10000000)
            reliable(no)
            #dir("/var/lib/syslog-ng/disk-buffer-balagetech")
        )
    );
};



log {
    source(s_network);
    destination(d_network);
    log {
        filter(f_main_router);
        parser {
            csv-parser(
                columns(ORIG, REPLY)
                delimiters(chars(","))
            );
            kv-parser(
                prefix("nf_orig.")
                template("${ORIG}")
            );
            kv-parser(
                prefix("nf_reply.")
                template("${REPLY}")
            );
            geoip2(
                "${nf_orig.DST}",
                prefix( "geoip2." )
                database( "/etc/syslog-ng/GeoLite2-City.mmdb" )
            );
        };
        parser(p_correlate_session_data);
        parser(p_reversedns_server);
        parser(p_reversedns_client);
        rewrite(r_geoip2);
        # for debugging purposes
        #destination(d_network_conntrack);
        filter(f_correlated_message);
        destination(d_elastic_network);
    };
    flags(flow-control);
};

